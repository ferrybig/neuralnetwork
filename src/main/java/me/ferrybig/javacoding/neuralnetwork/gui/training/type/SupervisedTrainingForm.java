package me.ferrybig.javacoding.neuralnetwork.gui.training.type;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.ProgressMonitor;
import javax.swing.SwingWorker;
import javax.swing.table.TableModel;
import me.ferrybig.javacoding.neuralnetwork.CompiledNetwork;
import me.ferrybig.javacoding.neuralnetwork.SupervisedTrainingSet;
import me.ferrybig.javacoding.neuralnetwork.error.ErrorCalculator;
import me.ferrybig.javacoding.neuralnetwork.error.SupervisedErrorCalculator;

/**
 *
 * @author Fernando
 */
public class SupervisedTrainingForm extends JPanel implements Training {

	private final CompiledNetwork network;

	/**
	 * Creates new form SupervisedTrainingForm
	 *
	 * @param network
	 */
	public SupervisedTrainingForm(CompiledNetwork network) {
		this.network = network;
		initComponents();
	}

	@Override
	public JComponent getComponent() {
		return this;
	}

	@Override
	public ErrorCalculator getErrorCalculator() {
		TableModel mod = table.getModel();
		int length = mod.getRowCount();
		List<SupervisedTrainingSet> training = new ArrayList<>(length);
		for (int i = 0; i < length; i++) {
			double[] in = new double[network.getInputSize()];
			double[] out = new double[network.getOutputSize()];
			for (int j = 0; j < in.length; j++) {
				in[j] = ((boolean) mod.getValueAt(i, j)) ? 1.0 : 0.0;
			}
			for (int j = 0; j < out.length; j++) {
				out[j] = ((boolean) mod.getValueAt(i, in.length + j)) ? 1.0 : 0.0;
			}
			training.add(new SupervisedTrainingSet(in, out));
		}
		return new SupervisedErrorCalculator(training);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        scroll = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        autofillNetwork = new javax.swing.JButton();
        autofillCalculation = new javax.swing.JButton();
        exampleSets = new javax.swing.JButton();
        leftPadding = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        rigthPadding = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));

        setLayout(new java.awt.GridBagLayout());

        table.setModel(new SupervisedTableModel(network)
        );
        table.setFillsViewportHeight(true);
        scroll.setViewportView(table);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(scroll, gridBagConstraints);

        autofillNetwork.setText("Autofill from network");
        autofillNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autofillNetworkautofillFromNetwork(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(autofillNetwork, gridBagConstraints);

        autofillCalculation.setText("Autofill from calculation");
        autofillCalculation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autofillFromCalculation(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(autofillCalculation, gridBagConstraints);

        exampleSets.setText("Examples");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(exampleSets, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 0.3;
        add(leftPadding, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 0.3;
        add(rigthPadding, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void autofillNetworkautofillFromNetwork(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autofillNetworkautofillFromNetwork
		ProgressMonitor monitor = new ProgressMonitor(this, "Populating model", "", 0, this.table.getRowCount());
		int max = this.table.getModel().getRowCount();
		int inSize = network.getInputSize();
		int outSize = network.getOutputSize();
		double[] cache = new double[network.getMaxCacheSize()];
		double[] in = new double[network.getInputSize()];
		new SwingWorker<Object, double[]>() {
			@Override
			@SuppressWarnings({"ConfusingArrayVararg", "PrimitiveArrayArgumentToVariableArgMethod"})
			// Suppressing warnings to publish as the array shouldn't be unwrapped
			protected Object doInBackground() throws Exception {
				for (int i = 0; i < max && !this.isCancelled(); i++) {
					for (int j = 0; j < inSize; j++) {
						in[j] = (i & (1 << j)) != 0 ? 1 : 0;
					}
					double[] out = new double[network.getOutputSize()];
					network.resolveNetworkSequential(in, out, cache);
					publish(out);
				}
				return null;
			}

			@Override
			protected void done() {
				monitor.close();
			}

			int rowCount = 0;

			@Override
			protected void process(List<double[]> chunks) {
				if (monitor.isCanceled()) {
					this.cancel(false);
				}
				int outputOffset = inSize;
				for (double[] chunk : chunks) {
					assert chunk.length == outSize;
					for (int i = 0; i < outSize; i++) {
						table.getModel().setValueAt(chunk[i] > 0.5, rowCount, i + outputOffset);
					}
					rowCount++;
				}
				monitor.setProgress(rowCount);
			}

		}.execute();

    }//GEN-LAST:event_autofillNetworkautofillFromNetwork

    private void autofillFromCalculation(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autofillFromCalculation
		// TODO add your handling code here:
    }//GEN-LAST:event_autofillFromCalculation


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton autofillCalculation;
    private javax.swing.JButton autofillNetwork;
    private javax.swing.JButton exampleSets;
    private javax.swing.Box.Filler leftPadding;
    private javax.swing.Box.Filler rigthPadding;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

}
