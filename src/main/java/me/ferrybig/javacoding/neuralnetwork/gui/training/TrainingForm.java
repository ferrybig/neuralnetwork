package me.ferrybig.javacoding.neuralnetwork.gui.training;

import java.awt.GridBagConstraints;
import java.util.Iterator;
import java.util.Random;
import javax.swing.JFrame;
import me.ferrybig.javacoding.neuralnetwork.CompiledNetwork;
import me.ferrybig.javacoding.neuralnetwork.gui.training.type.SupervisedTrainingForm;
import me.ferrybig.javacoding.neuralnetwork.gui.training.type.Training;
import me.ferrybig.javacoding.neuralnetwork.gui.training.type.TrainingType;

/**
 *
 * @author Fernando
 */
public class TrainingForm extends javax.swing.JDialog {

	private final CompiledNetwork network;
	private final JFrame parent;
	private final Runnable updateWeigth;
	private Training oldType = null;
	private static final Random GLOBAL_RANDOM = new Random();

	/**
	 * Creates new form TrainingForm
	 *
	 * @param parent
	 * @param modal
	 * @param network
	 * @param updateWeigth
	 */
	public TrainingForm(JFrame parent, boolean modal, CompiledNetwork network, Runnable updateWeigth) {
		super(parent, modal);
		this.parent = parent;
		this.network = network;
		this.updateWeigth = updateWeigth;
		initComponents();
		trainingMethodChanged(null);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        menuSeperator = new javax.swing.JSeparator();
        menu = new javax.swing.JPanel();
        train = new javax.swing.JButton();
        momentumText = new javax.swing.JLabel();
        targetErrorText = new javax.swing.JLabel();
        seedText = new javax.swing.JLabel();
        seedField = new javax.swing.JTextField();
        threadText = new javax.swing.JLabel();
        rigthPadding = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        leftPadding = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        iterationText = new javax.swing.JLabel();
        attemptsText = new javax.swing.JLabel();
        leftFieldPadding = new javax.swing.Box.Filler(new java.awt.Dimension(60, 0), new java.awt.Dimension(60, 0), new java.awt.Dimension(60, 0));
        rigthFieldPadding = new javax.swing.Box.Filler(new java.awt.Dimension(60, 0), new java.awt.Dimension(60, 0), new java.awt.Dimension(60, 0));
        threadField = new javax.swing.JSpinner();
        iterationField = new javax.swing.JSpinner();
        attemptsField = new javax.swing.JSpinner();
        momentumField = new javax.swing.JSpinner();
        targetErrorField = new javax.swing.JSpinner();
        trainingTypeField = new javax.swing.JComboBox<>();
        trainingTypeLabel = new javax.swing.JLabel();
        topPane = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(menuSeperator, gridBagConstraints);

        menu.setLayout(new java.awt.GridBagLayout());

        train.setText("Train");
        train.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        menu.add(train, gridBagConstraints);

        momentumText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        momentumText.setLabelFor(momentumField);
        momentumText.setText("Momentum:");
        momentumText.setToolTipText("Speed of the learning");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        menu.add(momentumText, gridBagConstraints);

        targetErrorText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        targetErrorText.setLabelFor(targetErrorField);
        targetErrorText.setText("Target error:");
        targetErrorText.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        menu.add(targetErrorText, gridBagConstraints);

        seedText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        seedText.setLabelFor(seedField);
        seedText.setText("Seed:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        menu.add(seedText, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        menu.add(seedField, gridBagConstraints);

        threadText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        threadText.setLabelFor(threadField);
        threadText.setText("Threads:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        menu.add(threadText, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        menu.add(rigthPadding, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        menu.add(leftPadding, gridBagConstraints);

        iterationText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        iterationText.setLabelFor(iterationField);
        iterationText.setText("Iterations:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        menu.add(iterationText, gridBagConstraints);

        attemptsText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        attemptsText.setLabelFor(attemptsField);
        attemptsText.setText("Attempts:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        menu.add(attemptsText, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        menu.add(leftFieldPadding, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        menu.add(rigthFieldPadding, gridBagConstraints);

        threadField.setModel(new javax.swing.SpinnerNumberModel(getNumberOfProcessors() * 2, 1, null, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        menu.add(threadField, gridBagConstraints);

        iterationField.setModel(new javax.swing.SpinnerNumberModel(10000, 1, null, 100));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        menu.add(iterationField, gridBagConstraints);

        attemptsField.setModel(new javax.swing.SpinnerNumberModel(1000, 1, null, 10));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        menu.add(attemptsField, gridBagConstraints);

        momentumField.setModel(new javax.swing.SpinnerNumberModel(0.01f, 0.001f, null, 0.01f));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        menu.add(momentumField, gridBagConstraints);

        targetErrorField.setModel(new javax.swing.SpinnerNumberModel(0.01d, 0.0d, 1.0d, 0.001d));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        menu.add(targetErrorField, gridBagConstraints);

        trainingTypeField.setModel(new javax.swing.DefaultComboBoxModel<TrainingType>(KNOWN_TRAINING_TYPES)
        );
        trainingTypeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainingMethodChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        menu.add(trainingTypeField, gridBagConstraints);

        trainingTypeLabel.setText("Training method:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        menu.add(trainingTypeLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        getContentPane().add(menu, gridBagConstraints);

        topPane.setMinimumSize(new java.awt.Dimension(0, 300));
        topPane.setPreferredSize(new java.awt.Dimension(0, 300));
        topPane.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(topPane, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void trainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainActionPerformed
		Random r;
		String text = seedField.getText();
		if (text.isEmpty()) {
			r = new Random(GLOBAL_RANDOM.nextLong());
		} else {
			try {
				r = new Random(Long.parseLong(text));
			} catch (NumberFormatException e) {
				r = new Random(text.hashCode());
			}
		}
		Iterator<Random> random = r.longs().mapToObj(Random::new).iterator();
		InTrainingForm form = new InTrainingForm(
				this,
				true,
				network,
				Float.parseFloat(momentumField.getValue().toString()),
				Double.parseDouble(targetErrorField.getValue().toString()),
				random,
				updateWeigth,
				Long.parseLong(iterationField.getValue().toString()),
				Long.parseLong(attemptsField.getValue().toString()),
				Integer.parseInt(threadField.getValue().toString()),
				oldType.getErrorCalculator()
		);
		form.start();
		this.dispose();
		form.setVisible(true);
    }//GEN-LAST:event_trainActionPerformed

    private void trainingMethodChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainingMethodChanged
        TrainingType type = (TrainingType)trainingTypeField.getSelectedItem();
		if(oldType != null)
			topPane.remove(oldType.getComponent());
		oldType = type.createComponent().apply(network);
		GridBagConstraints constrains = new GridBagConstraints();
		constrains.fill = GridBagConstraints.BOTH;
		constrains.weightx = 1;
		constrains.weighty = 1;
		topPane.add(oldType.getComponent(), constrains);
    }//GEN-LAST:event_trainingMethodChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner attemptsField;
    private javax.swing.JLabel attemptsText;
    private javax.swing.JSpinner iterationField;
    private javax.swing.JLabel iterationText;
    private javax.swing.Box.Filler leftFieldPadding;
    private javax.swing.Box.Filler leftPadding;
    private javax.swing.JPanel menu;
    private javax.swing.JSeparator menuSeperator;
    private javax.swing.JSpinner momentumField;
    private javax.swing.JLabel momentumText;
    private javax.swing.Box.Filler rigthFieldPadding;
    private javax.swing.Box.Filler rigthPadding;
    private javax.swing.JTextField seedField;
    private javax.swing.JLabel seedText;
    private javax.swing.JSpinner targetErrorField;
    private javax.swing.JLabel targetErrorText;
    private javax.swing.JSpinner threadField;
    private javax.swing.JLabel threadText;
    private javax.swing.JPanel topPane;
    private javax.swing.JButton train;
    private javax.swing.JComboBox<TrainingType> trainingTypeField;
    private javax.swing.JLabel trainingTypeLabel;
    // End of variables declaration//GEN-END:variables

	public int getNumberOfProcessors() {
		return Runtime.getRuntime().availableProcessors();
	}

	private static final TrainingType[] KNOWN_TRAINING_TYPES = new TrainingType[]{
		new TrainingType("Supervised", SupervisedTrainingForm::new),
	};
}
