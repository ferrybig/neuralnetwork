package me.ferrybig.javacoding.neuralnetwork.gui.network;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.Arrays;
import java.util.concurrent.ExecutionException;
import java.util.stream.Stream;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import me.ferrybig.javacoding.neuralnetwork.CompiledNetwork;
import me.ferrybig.javacoding.neuralnetwork.gui.training.TrainingForm;

/**
 *
 * @author Fernando
 */
public class ApplicationForm extends javax.swing.JPanel {

	private final JFrame frame;
	private final CompiledNetwork network;

	/**
	 * Creates new form ApplicationForm
	 *
	 * @param frame
	 * @param network
	 */
	public ApplicationForm(JFrame frame, CompiledNetwork network) {
		this.frame = frame;
		this.network = network;
		initComponents();
	}

	public void updateButtonStatus() {

	}

	public static void main(String[] args) {

		SwingUtilities.invokeLater(() -> {
			try {
				UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
			} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
				ex.printStackTrace();
			}
			CompiledNetwork network = new CompiledNetwork(
				// TODO Make an actual GUI to change this

				// // Simple XOR network:
				// new int[]{2, 2, 1}

				// Deep network
				new int[]{4, 4, 4, 4, 4, 4}

				// // Network that can solve the values in the card game Hearts
				// new int[]{5, 3}

				// Manual build XOR
				/*
					new double[]{
						100, 100, -50,
						-100, -100, 150,
						100, 100, -150
					}, new int[]{2, 2, 1}
				*/
				// Auto build network that can solve the game Hearts
				/*
					new double[]{
						+1.8961423834E+01, -2.8096083987E+01, +1.9196589970E+01,
						+9.5184649939E+01, -7.6187141561E+01, -4.8002909561E+01,
						-5.9219461604E+01, -5.3101409829E+01, +3.1068022238E+01,
						-7.7713999374E+01, +3.1074066134E+01, -4.7287257233E+01,
						+2.3938131297E+01, -2.9123511549E+01, +1.2443074089E+01,
						+1.1314415727E+01, +2.4569077886E+01, -6.7064693323E+01
					}, new int[]{5, 3},
				*/
			);
			JFrame frame = new JFrame();
			frame.setContentPane(new ApplicationForm(frame, network));
			frame.setLocationByPlatform(true);
			frame.pack();
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			frame.setVisible(true);
		});
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        imageSaveGui = new javax.swing.JFileChooser();
        exportImageOptions = new javax.swing.JPanel();
        exportOptionsHeader = new javax.swing.JLabel();
        imageTypeText = new javax.swing.JLabel();
        imageQualityText = new javax.swing.JLabel();
        exportImageWaterMark = new javax.swing.JCheckBox();
        imageType = new javax.swing.JComboBox<>();
        checkboxAligner = new javax.swing.Box.Filler(new java.awt.Dimension(20, 4), new java.awt.Dimension(20, 4), new java.awt.Dimension(20, 4));
        exportImageTransparant = new javax.swing.JCheckBox();
        imageQuality = new javax.swing.JComboBox<>();
        imageExportTopPusher = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        imageExportLeftDistance = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        imageExportRigthDistance = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        scroll = new javax.swing.JScrollPane();
        networkHolder = new javax.swing.JPanel();
        form = new me.ferrybig.javacoding.neuralnetwork.gui.network.NetworkForm();
        bottomBar = new javax.swing.JPanel();
        topLeft = new javax.swing.JPanel();
        topToBottomView = new javax.swing.JToggleButton();
        centerCells = new javax.swing.JToggleButton();
        bottomLeft = new javax.swing.JPanel();
        hoverEffect = new javax.swing.JToggleButton();
        showLines = new javax.swing.JToggleButton();
        seperator = new javax.swing.JSeparator();
        train = new javax.swing.JButton();
        test = new javax.swing.JButton();
        spacer = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        topRigth = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        exportImage = new javax.swing.JButton();
        bottomRigth = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();

        imageSaveGui.setAccessory(exportImageOptions);
        imageSaveGui.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        imageSaveGui.setDialogTitle("Save png");

        exportImageOptions.setFont(exportImageOptions.getFont().deriveFont(exportImageOptions.getFont().getStyle() | java.awt.Font.BOLD));
        exportImageOptions.setLayout(new java.awt.GridBagLayout());

        exportOptionsHeader.setFont(exportOptionsHeader.getFont().deriveFont((exportOptionsHeader.getFont().getStyle() | java.awt.Font.ITALIC)));
        exportOptionsHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exportOptionsHeader.setText("Export options:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        exportImageOptions.add(exportOptionsHeader, gridBagConstraints);

        imageTypeText.setText("Image type:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        exportImageOptions.add(imageTypeText, gridBagConstraints);

        imageQualityText.setText("Quality:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        exportImageOptions.add(imageQualityText, gridBagConstraints);

        exportImageWaterMark.setSelected(true);
        exportImageWaterMark.setText("Watermark");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        exportImageOptions.add(exportImageWaterMark, gridBagConstraints);

        imageType.setModel(new DefaultComboBoxModel<String>(Stream.concat(Stream.of("PNG", "JPG", "GIF"), Arrays.stream(ImageIO.getWriterFormatNames())).map(String::toUpperCase).distinct().toArray(String[]::new)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        exportImageOptions.add(imageType, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        exportImageOptions.add(checkboxAligner, gridBagConstraints);

        exportImageTransparant.setText("Transparant");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        exportImageOptions.add(exportImageTransparant, gridBagConstraints);

        imageQuality.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "High", "Normal", "Low" }));
        imageQuality.setSelectedItem("Normal");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        exportImageOptions.add(imageQuality, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 0.1;
        exportImageOptions.add(imageExportTopPusher, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        exportImageOptions.add(imageExportLeftDistance, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        exportImageOptions.add(imageExportRigthDistance, gridBagConstraints);

        setLayout(new java.awt.GridBagLayout());

        scroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scroll.setMinimumSize(new java.awt.Dimension(200, 200));
        scroll.setPreferredSize(new java.awt.Dimension(200, 200));

        networkHolder.setBackground(new java.awt.Color(255, 255, 255));
        networkHolder.setLayout(new java.awt.GridBagLayout());

        form.setHoverEfect(true);
        form.setLeftToRightView(true);
        form.setNetwork(this.network);
        form.setLayout(new java.awt.FlowLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        networkHolder.add(form, gridBagConstraints);

        scroll.setViewportView(networkHolder);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        add(scroll, gridBagConstraints);

        bottomBar.setLayout(new java.awt.GridBagLayout());

        topLeft.setLayout(new java.awt.GridBagLayout());

        topToBottomView.setSelected(!form.isLeftToRightView());
        topToBottomView.setText("Top to bottom view");
        topToBottomView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateNetworkSettings(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        topLeft.add(topToBottomView, gridBagConstraints);

        centerCells.setSelected(form.isCenteredCells());
        centerCells.setText("Center cells");
        centerCells.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateNetworkSettings(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        topLeft.add(centerCells, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        bottomBar.add(topLeft, gridBagConstraints);

        bottomLeft.setLayout(new java.awt.GridBagLayout());

        hoverEffect.setSelected(form.isHoverEfect());
        hoverEffect.setText("Hover effect");
        hoverEffect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateNetworkSettings(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        bottomLeft.add(hoverEffect, gridBagConstraints);

        showLines.setSelected(form.isShowLines());
        showLines.setText("Show lines");
        showLines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateNetworkSettings(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        bottomLeft.add(showLines, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        bottomBar.add(bottomLeft, gridBagConstraints);

        seperator.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        bottomBar.add(seperator, gridBagConstraints);

        train.setText("Train");
        train.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        bottomBar.add(train, gridBagConstraints);

        test.setText("Test");
        test.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        bottomBar.add(test, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        bottomBar.add(spacer, gridBagConstraints);

        topRigth.setLayout(new java.awt.GridBagLayout());

        jButton1.setText("Resize");
        jButton1.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        topRigth.add(jButton1, gridBagConstraints);

        exportImage.setText("Export image");
        exportImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportImageActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        topRigth.add(exportImage, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        bottomBar.add(topRigth, gridBagConstraints);

        bottomRigth.setLayout(new java.awt.GridBagLayout());

        saveButton.setText("Save");
        saveButton.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        bottomRigth.add(saveButton, gridBagConstraints);

        loadButton.setText("Load");
        loadButton.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        bottomRigth.add(loadButton, gridBagConstraints);

        newButton.setText("New");
        newButton.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        bottomRigth.add(newButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        bottomBar.add(bottomRigth, gridBagConstraints);
        bottomRigth.getAccessibleContext().setAccessibleName("File actions");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(bottomBar, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void updateNetworkSettings(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateNetworkSettings
		form.setShowLines(this.showLines.isSelected());
		form.setHoverEfect(this.hoverEffect.isSelected());
		form.setLeftToRightView(!topToBottomView.isSelected());
		form.setCenteredCells(centerCells.isSelected());
		//scroll.revalidate();
    }//GEN-LAST:event_updateNetworkSettings

    private void exportImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportImageActionPerformed
		BufferedImage img = new BufferedImage(form.getWidth(), form.getHeight(),
				BufferedImage.TYPE_INT_RGB);
		Graphics2D g = null;
		try {
			g = img.createGraphics();
			form.printAll(g);
		} finally {
			if (g != null) {
				g.dispose();
			}
		}
		int status = imageSaveGui.showSaveDialog(this);
		if (status != JFileChooser.APPROVE_OPTION) {
			return;
		}
		File file = imageSaveGui.getSelectedFile();
		if (file.exists() && file.length() != 0) {
			status = JOptionPane.showConfirmDialog(this, "Sure to overwrite?",
					"Export image", JOptionPane.YES_NO_OPTION);
			if (status != JOptionPane.YES_OPTION) {
				return;
			}
		}
		exportImage.setEnabled(false);
		new ImageSaveTask(file, img).execute();
    }//GEN-LAST:event_exportImageActionPerformed

    private void trainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainActionPerformed
		new TrainingForm(this.frame, true, network, () -> {
			this.form.updateNetworkWeigths();
		}).setVisible(true);
    }//GEN-LAST:event_trainActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomBar;
    private javax.swing.JPanel bottomLeft;
    private javax.swing.JPanel bottomRigth;
    private javax.swing.JToggleButton centerCells;
    private javax.swing.Box.Filler checkboxAligner;
    private javax.swing.JButton exportImage;
    private javax.swing.JPanel exportImageOptions;
    private javax.swing.JCheckBox exportImageTransparant;
    private javax.swing.JCheckBox exportImageWaterMark;
    private javax.swing.JLabel exportOptionsHeader;
    private me.ferrybig.javacoding.neuralnetwork.gui.network.NetworkForm form;
    private javax.swing.JToggleButton hoverEffect;
    private javax.swing.Box.Filler imageExportLeftDistance;
    private javax.swing.Box.Filler imageExportRigthDistance;
    private javax.swing.Box.Filler imageExportTopPusher;
    private javax.swing.JComboBox<String> imageQuality;
    private javax.swing.JLabel imageQualityText;
    private javax.swing.JFileChooser imageSaveGui;
    private javax.swing.JComboBox<String> imageType;
    private javax.swing.JLabel imageTypeText;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton loadButton;
    private javax.swing.JPanel networkHolder;
    private javax.swing.JButton newButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JSeparator seperator;
    private javax.swing.JToggleButton showLines;
    private javax.swing.Box.Filler spacer;
    private javax.swing.JButton test;
    private javax.swing.JPanel topLeft;
    private javax.swing.JPanel topRigth;
    private javax.swing.JToggleButton topToBottomView;
    private javax.swing.JButton train;
    // End of variables declaration//GEN-END:variables

	private class ImageSaveTask extends SwingWorker<Object, Object> {

		private final File file;
		private final BufferedImage image;

		public ImageSaveTask(File file, BufferedImage image) {
			this.file = file;
			this.image = image;
		}

		@Override
		protected Object doInBackground() throws Exception {
			if (!ImageIO.write(image, "png", file)) {
				throw new AssertionError("png writer should be instaled in every system");
			}
			return null;
		}

		@Override
		protected void done() {
			super.done();
			Throwable exception;
			try {
				this.get();
				exception = null;
			} catch (InterruptedException | ExecutionException e) {
				exception = e;
				e.printStackTrace();
			}
			if (exception == null) {
				JOptionPane.showMessageDialog(ApplicationForm.this,
						"Succesfully export image to " + file,
						"Export as PNG", JOptionPane.INFORMATION_MESSAGE);
			} else {
				JOptionPane.showMessageDialog(ApplicationForm.this,
						"Failed exporting image to " + file + "\n\n" + exception.getMessage(),
						"Export as PNG", JOptionPane.ERROR_MESSAGE);
			}
			exportImage.setEnabled(true);
		}

	}
}
