package me.ferrybig.javacoding.neuralnetwork.gui.training;

import java.util.Iterator;
import java.util.Random;
import java.util.concurrent.ThreadPoolExecutor;
import javax.swing.JOptionPane;
import javax.swing.ProgressMonitor;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import me.ferrybig.javacoding.neuralnetwork.CompiledNetwork;
import me.ferrybig.javacoding.neuralnetwork.error.ErrorCalculator;

/**
 *
 * @author Fernando
 */
public class InTrainingForm extends javax.swing.JDialog {

	private final WorkerRunner runner;
	private final CompiledNetwork network;
	private final Runnable updateNetworkWeigth;
	private final ErrorCalculator error;
	private final int threads;
	private CompiledNetwork bestNetwork;
	private boolean hasClosed = false;
	private double bestError = Double.POSITIVE_INFINITY;
	private final double initialError;
	private final double targetError;
	private final long maxIterations;
	private final TrainingForm parent;
	private long failedAttemptsLong = 0;

	public InTrainingForm(TrainingForm parent, boolean modal, CompiledNetwork network,
			float momentum, double targetError, Iterator<Random> random, Runnable updateNetworkWeigth,
			long maxIterations, long maxAttempts, int threads, ErrorCalculator error) {
		super(parent, modal);
		this.parent = parent;
		this.error = error;
		this.network = network;
		this.updateNetworkWeigth = updateNetworkWeigth;
		this.threads = threads;
		this.targetError = targetError;
		this.maxIterations = maxIterations;
		this.initialError = this.error.calculate(network, new double[network.getOutputSize()], new double[network.getMinCacheSize()]);
		
		initComponents();
		
		this.runner = new WorkerRunner(network, momentum, targetError, random,
				panel, maxIterations, maxAttempts, threads, error,
				i -> {
					iterationBar.setString("Iteration: " + i);
					iterationBar.setValue(Math.round(i  * 100 / maxIterations));
				},
				i -> {
					runningAttempts.setText(String.valueOf(i));
				}
		);

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        iterationBar = new javax.swing.JProgressBar();
        errorBar = new javax.swing.JProgressBar();
        lowestErrorText = new javax.swing.JLabel();
        lowestErrorField = new javax.swing.JTextField();
        failedAttemptsText = new javax.swing.JLabel();
        failedAttempts = new javax.swing.JTextField();
        attemptsText = new javax.swing.JLabel();
        attempts = new javax.swing.JTextField();
        workerHolder = new javax.swing.JScrollPane();
        panel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        targetErrorText = new javax.swing.JLabel();
        targetErrorField = new javax.swing.JTextField();
        runningAttempts = new javax.swing.JTextField();
        runningAttemptsText = new javax.swing.JLabel();
        initialErrorField = new javax.swing.JTextField();
        initialErrorText = new javax.swing.JLabel();
        paddingLeft = new javax.swing.Box.Filler(new java.awt.Dimension(80, 0), new java.awt.Dimension(80, 0), new java.awt.Dimension(80, 0));
        paddingMid = new javax.swing.Box.Filler(new java.awt.Dimension(80, 0), new java.awt.Dimension(80, 0), new java.awt.Dimension(80, 0));
        paddingRigth = new javax.swing.Box.Filler(new java.awt.Dimension(80, 0), new java.awt.Dimension(80, 0), new java.awt.Dimension(80, 0));
        bestAndLowest = new javax.swing.JPanel();
        bestState = new me.ferrybig.javacoding.neuralnetwork.gui.training.WorkerForm();
        initialState = new me.ferrybig.javacoding.neuralnetwork.gui.training.WorkerForm();
        networkSeperator = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                InTrainingForm.this.windowClosed(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        iterationBar.setString("Iteration: 0");
        iterationBar.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(iterationBar, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(errorBar, gridBagConstraints);

        lowestErrorText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lowestErrorText.setText("Lowest error:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(lowestErrorText, gridBagConstraints);

        lowestErrorField.setEditable(false);
        lowestErrorField.setText(String.valueOf(initialError));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(lowestErrorField, gridBagConstraints);

        failedAttemptsText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        failedAttemptsText.setText("Failed attempts:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(failedAttemptsText, gridBagConstraints);

        failedAttempts.setEditable(false);
        failedAttempts.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(failedAttempts, gridBagConstraints);

        attemptsText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        attemptsText.setText("Attempts:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(attemptsText, gridBagConstraints);

        attempts.setEditable(false);
        attempts.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(attempts, gridBagConstraints);

        panel.setPreferredSize(new java.awt.Dimension(300, 300));
        workerHolder.setViewportView(panel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(workerHolder, gridBagConstraints);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeWindow(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(cancelButton, gridBagConstraints);

        targetErrorText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        targetErrorText.setText("Target error:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(targetErrorText, gridBagConstraints);

        targetErrorField.setEditable(false);
        targetErrorField.setText(String.valueOf(targetError));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(targetErrorField, gridBagConstraints);

        runningAttempts.setEditable(false);
        runningAttempts.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(runningAttempts, gridBagConstraints);

        runningAttemptsText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        runningAttemptsText.setText("Running attempts:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(runningAttemptsText, gridBagConstraints);

        initialErrorField.setEditable(false);
        initialErrorField.setText(String.valueOf(initialError));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(initialErrorField, gridBagConstraints);

        initialErrorText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        initialErrorText.setText("Initial error");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(initialErrorText, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        getContentPane().add(paddingLeft, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        getContentPane().add(paddingMid, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        getContentPane().add(paddingRigth, gridBagConstraints);

        bestAndLowest.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 2, 2));

        bestState.setInitialError(this.initialError);
        bestState.setMaxIterations(this.maxIterations);
        bestState.setTargetError(this.targetError);
        bestState.setTitle("Best network");
        bestAndLowest.add(bestState);

        initialState.setError(this.initialError);
        initialState.setInitialError(this.initialError);
        initialState.setMaxIterations(this.maxIterations);
        initialState.setTargetError(this.targetError);
        initialState.setTitle("Initial state");
        bestAndLowest.add(initialState);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(bestAndLowest, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(networkSeperator, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void windowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClosed
//		this.runner.stop();
//		ThreadPoolExecutor service = this.runner.getPool();
//		if(service == null)
//			return;
//		ProgressMonitor mon = new ProgressMonitor(this.getParent(), "Closing worker pool...", "", 0, this.threads);
//		mon.setMillisToDecideToPopup(1000);
//		Timer timer = new Timer(100, e -> {
//			mon.setProgress(threads - service.getPoolSize());
//			mon.setNote("Waiting for " + service.getPoolSize() + " threads to stop");
//			Timer t = (Timer)e.getSource();
//			if(service.isTerminated()) {
//				System.out.println("Main worker pool terminated");
//				t.stop();
//				mon.close();
//			}
//		});
//		timer.setRepeats(true);
//		timer.start();

    }//GEN-LAST:event_windowClosed

    private void closeWindow(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeWindow
		this.dispose();
    }//GEN-LAST:event_closeWindow


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField attempts;
    private javax.swing.JLabel attemptsText;
    private javax.swing.JPanel bestAndLowest;
    private me.ferrybig.javacoding.neuralnetwork.gui.training.WorkerForm bestState;
    private javax.swing.JButton cancelButton;
    private javax.swing.JProgressBar errorBar;
    private javax.swing.JTextField failedAttempts;
    private javax.swing.JLabel failedAttemptsText;
    private javax.swing.JTextField initialErrorField;
    private javax.swing.JLabel initialErrorText;
    private me.ferrybig.javacoding.neuralnetwork.gui.training.WorkerForm initialState;
    private javax.swing.JProgressBar iterationBar;
    private javax.swing.JTextField lowestErrorField;
    private javax.swing.JLabel lowestErrorText;
    private javax.swing.JSeparator networkSeperator;
    private javax.swing.Box.Filler paddingLeft;
    private javax.swing.Box.Filler paddingMid;
    private javax.swing.Box.Filler paddingRigth;
    private javax.swing.JPanel panel;
    private javax.swing.JTextField runningAttempts;
    private javax.swing.JLabel runningAttemptsText;
    private javax.swing.JTextField targetErrorField;
    private javax.swing.JLabel targetErrorText;
    private javax.swing.JScrollPane workerHolder;
    // End of variables declaration//GEN-END:variables

	public void start() {
		this.runner.start(new WorkerRunner.NetworkReceiver() {
			@Override
			public void processedNetwork(CompiledNetwork network, boolean success, long iteration, double error) {
				if(error < bestError) {
					bestNetwork = network;
					bestError = error;
					lowestErrorField.setText(String.valueOf(error));
					bestState.setError(error);
					bestState.setIterations(iteration);
				}
				if(success) {
					hasClosed = true;
					InTrainingForm.this.runner.stop();
					InTrainingForm.this.dispose();
					copyNetworkBack(network);
				} else {
					failedAttemptsLong++;
					failedAttempts.setText(String.valueOf(failedAttemptsLong));
				}
			}

			@Override
			public void finished() {
				if(!hasClosed) {
					int option = JOptionPane.showConfirmDialog(InTrainingForm.this, 
							"Use best solution?", "No solution found!", 
							JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
					if(option == JOptionPane.YES_OPTION) {
						copyNetworkBack(bestNetwork);
					} else {
						// Make sure to rewind back the AWT stack at this point
						SwingUtilities.invokeLater(() -> parent.setVisible(true));
					}
				}
			}
			
		});
	}
	
	private void copyNetworkBack(CompiledNetwork newNetwork) {
		double[] weigth = newNetwork.getWeigth();
		System.arraycopy(weigth, 0, network.getWeigth(), 0, weigth.length);
		updateNetworkWeigth.run();
	}
}
